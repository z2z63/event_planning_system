// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique @db.VarChar(20)
  salt     String @db.Char(64)
  hash     String @db.Char(32)

  reimbursementsRequested Reimbursement[]       @relation("reimbursement applicant")
  reimbursementsHanlded Reimbursement[] @relation("reimbursement handler")
  ParticipantGroup        UserGroup[]
  NotificationComfirm     NotificationComfirm[]
}

model Activity {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(128)
  info        String      @db.Text
  startTime           DateTime
  endTime             DateTime
  budget              Decimal               @db.Money
  expenditure         Decimal               @default(0) @db.Money
  resources           Resource[]
  Reimbursement       Reimbursement[]
  ParticipantGroup    UserGroup[]
  Notification        Notification[]
  NotificationComfirm NotificationComfirm[]
  Agenda              Agenda[]
  cover       Blob        @relation(fields: [blobId], references: [id])
  blobId      Int
  Attachments Attachment[]
}

model Resource {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(128)
  activitys Activity[]
}

model Permission {
  name         String  @id @db.VarChar(128)
  organizer    Boolean
  participants Boolean
  admin        Boolean
}

model Attachment {
  id Int @id @default(autoincrement())
  visibility BigInt
  size       Int
  blob       Blob      @relation(fields: [blobId], references: [id])
  time       DateTime  @default(now())
  blobId     Int       @unique
  Activity   Activity? @relation(fields: [activityId], references: [id])
  activityId Int?
}

model ResourceGroup {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(128)
  info String @db.Text
}

model Reimbursement {
  id         Int                 @id @default(autoincrement())
  user       User                @relation("reimbursement applicant", fields: [userId], references: [id])
  activity   Activity            @relation(fields: [activityId], references: [id])
  title      String              @db.VarChar(128)
  amount     Decimal             @db.Money
  info       String              @db.Text
  status     ReimbursementStatus
  handler    User?               @relation("reimbursement handler", fields: [handlerId], references: [id])
  submitTime DateTime @default(now())
  handleTime DateTime?
  comment    String?  @db.Text
  blobs      Blob[]
  handlerId  Int?
  userId     Int
  activityId Int
}

model UserGroup {
  id           Int      @id @default(autoincrement())
  name         String   @db.Text
  info         String   @db.Text
  activity     Activity @relation(fields: [activityId], references: [id])
  activityId   Int
  seq          Int
  participants User[]
}

model Notification {
  id         Int      @id @default(autoincrement())
  activity   Activity @relation(fields: [activityId], references: [id])
  content    String   @db.Text
  visibility BigInt
  activityId Int
}

model NotificationComfirm {
  id         Int      @id @default(autoincrement())
  activity   Activity @relation(fields: [activityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  activityId Int
  userId     Int
}

model Agenda {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(128)
  startTime  DateTime
  endTime    DateTime
  info       String   @db.Text
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId Int
}

enum ReimbursementStatus {
  PENDING
  REJECTED
  APPROVED
}

model Blob {
  id              Int            @id @default(autoincrement())
  data            Bytes
  filename String @db.VarChar(256)
  Attachment      Attachment?
  Activity        Activity[]
  Reimbursement   Reimbursement? @relation(fields: [reimbursementId], references: [id])
  reimbursementId Int?
}
